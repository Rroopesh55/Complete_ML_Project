name: CI/CD to ECR + EC2

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths-ignore:
      - "README.md"
      - ".github/workflows/main.yaml"
      - ".dockerignore"
      - ".gitignore"

permissions:
  contents: read

env:
  AWS_REGION: us-east-2

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Lint code
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          python -m pytest tests/ || echo "No tests found, skipping..."

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          echo "Tagging image..."
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed successfully: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  continuous-deployment:
    name: Run container on EC2 self-hosted runner
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Pull latest image from ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          echo "Pulling latest image from ECR..."
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Stop & remove any existing container
        run: |
          echo "Stopping existing container if running..."
          docker stop ml_project_container || true
          docker rm ml_project_container || true
      
      - name: Run the new container (port 5000)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          echo "Starting new container..."
          docker run -d --name ml_project_container -p 5000:5000 \
            --restart unless-stopped \
            $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Container started successfully"
      
      - name: Verify container is running
        run: |
          sleep 10
          docker ps | grep ml_project_container
          echo "Container health check..."
          curl -f http://localhost:5000 || echo "App not ready yet, may need more time"
      
      - name: Clean old images
        run: |
          echo "Cleaning up old images..."
          docker image prune -f